package pluginmanager

import (
	"testing"
)

func TestEnvRegex(t *testing.T) {
	tests := []struct {
		name     string
		envKey   string
		expected bool
	}{
		// KUBERNETES_ 开头的变量应该匹配
		{"KUBERNETES_SERVICE_HOST", "KUBERNETES_SERVICE_HOST", true},
		{"KUBERNETES_SERVICE_PORT", "KUBERNETES_SERVICE_PORT", true},
		{"KUBERNETES_NODE_NAME", "KUBERNETES_NODE_NAME", true},
		{"KUBERNETES_POD_NAME", "KUBERNETES_POD_NAME", true},

		// 以 _SERVICE_HOST 结尾的变量应该匹配
		{"MYSQL_SERVICE_HOST", "MYSQL_SERVICE_HOST", true},
		{"REDIS_SERVICE_HOST", "REDIS_SERVICE_HOST", true},
		{"APP_SERVICE_HOST", "APP_SERVICE_HOST", true},
		{"YILI_SERVICE_1_SERVICE_HOST", "YILI_SERVICE_1_SERVICE_HOST", true},
		{"YILI_TEST_SERVICE_1000_SERVICE_HOST", "YILI_TEST_SERVICE_1000_SERVICE_HOST", true},
		{"YILI_TEST_SERVICE_1001_SERVICE_HOST", "YILI_TEST_SERVICE_1001_SERVICE_HOST", true},
		{"YILI_TEST_SERVICE_1002_SERVICE_HOST", "YILI_TEST_SERVICE_1002_SERVICE_HOST", true},

		// 以 _SERVICE_PORT 结尾的变量应该匹配
		{"MYSQL_SERVICE_PORT", "MYSQL_SERVICE_PORT", true},
		{"REDIS_SERVICE_PORT", "REDIS_SERVICE_PORT", true},
		{"APP_SERVICE_PORT", "APP_SERVICE_PORT", true},
		{"YILI_SERVICE_1_SERVICE_PORT", "YILI_SERVICE_1_SERVICE_PORT", true},
		{"YILI_TEST_SERVICE_1000_SERVICE_PORT", "YILI_TEST_SERVICE_1000_SERVICE_PORT", true},
		{"YILI_TEST_SERVICE_1001_SERVICE_PORT", "YILI_TEST_SERVICE_1001_SERVICE_PORT", true},
		{"YILI_TEST_SERVICE_1002_SERVICE_PORT", "YILI_TEST_SERVICE_1002_SERVICE_PORT", true},

		// 以 _SERVICE_PORT_PORT 结尾的变量应该匹配
		{"MYSQL_SERVICE_PORT_PORT", "MYSQL_SERVICE_PORT_PORT", true},
		{"REDIS_SERVICE_PORT_PORT", "REDIS_SERVICE_PORT_PORT", true},
		{"YILI_SERVICE_1_SERVICE_PORT_PORT", "YILI_SERVICE_1_SERVICE_PORT_PORT", true},
		{"YILI_TEST_SERVICE_1000_SERVICE_PORT_PORT", "YILI_TEST_SERVICE_1000_SERVICE_PORT_PORT", true},
		{"YILI_TEST_SERVICE_1001_SERVICE_PORT_PORT", "YILI_TEST_SERVICE_1001_SERVICE_PORT_PORT", true},
		{"YILI_TEST_SERVICE_1002_SERVICE_PORT_PORT", "YILI_TEST_SERVICE_1002_SERVICE_PORT_PORT", true},

		// 包含 _SERVICE_数字_PORT 的变量应该匹配
		{"MYSQL_SERVICE_3306_PORT", "MYSQL_SERVICE_3306_PORT", true},
		{"REDIS_SERVICE_6379_PORT", "REDIS_SERVICE_6379_PORT", true},
		{"APP_SERVICE_8080_PORT", "APP_SERVICE_8080_PORT", true},
		{"DB_SERVICE_5432_PORT_80", "DB_SERVICE_5432_PORT_80", true}, // 包含 PORT 后还有其他内容
		{"YILI_SERVICE_1_PORT", "YILI_SERVICE_1_PORT", true},
		{"YILI_SERVICE_1_PORT_8081_TCP", "YILI_SERVICE_1_PORT_8081_TCP", true},
		{"YILI_SERVICE_1_PORT_8081_TCP_ADDR", "YILI_SERVICE_1_PORT_8081_TCP_ADDR", true},
		{"YILI_SERVICE_1_PORT_8081_TCP_PORT", "YILI_SERVICE_1_PORT_8081_TCP_PORT", true},
		{"YILI_SERVICE_1_PORT_8081_TCP_PROTO", "YILI_SERVICE_1_PORT_8081_TCP_PROTO", true},
		{"YILI_TEST_SERVICE_1000_PORT", "YILI_TEST_SERVICE_1000_PORT", true},
		{"YILI_TEST_SERVICE_1000_PORT_8081_TCP", "YILI_TEST_SERVICE_1000_PORT_8081_TCP", true},
		{"YILI_TEST_SERVICE_1000_PORT_8081_TCP_ADDR", "YILI_TEST_SERVICE_1000_PORT_8081_TCP_ADDR", true},
		{"YILI_TEST_SERVICE_1000_PORT_8081_TCP_PORT", "YILI_TEST_SERVICE_1000_PORT_8081_TCP_PORT", true},
		{"YILI_TEST_SERVICE_1000_PORT_8081_TCP_PROTO", "YILI_TEST_SERVICE_1000_PORT_8081_TCP_PROTO", true},
		{"YILI_TEST_SERVICE_1001_PORT", "YILI_TEST_SERVICE_1001_PORT", true},
		{"YILI_TEST_SERVICE_1001_PORT_8081_TCP", "YILI_TEST_SERVICE_1001_PORT_8081_TCP", true},
		{"YILI_TEST_SERVICE_1001_PORT_8081_TCP_ADDR", "YILI_TEST_SERVICE_1001_PORT_8081_TCP_ADDR", true},
		{"YILI_TEST_SERVICE_1001_PORT_8081_TCP_PORT", "YILI_TEST_SERVICE_1001_PORT_8081_TCP_PORT", true},
		{"YILI_TEST_SERVICE_1001_PORT_8081_TCP_PROTO", "YILI_TEST_SERVICE_1001_PORT_8081_TCP_PROTO", true},
		{"YILI_TEST_SERVICE_1002_PORT", "YILI_TEST_SERVICE_1002_PORT", true},
		{"YILI_TEST_SERVICE_1002_PORT_8081_TCP", "YILI_TEST_SERVICE_1002_PORT_8081_TCP", true},
		{"YILI_TEST_SERVICE_1002_PORT_8081_TCP_ADDR", "YILI_TEST_SERVICE_1002_PORT_8081_TCP_ADDR", true},
		{"YILI_TEST_SERVICE_1002_PORT_8081_TCP_PORT", "YILI_TEST_SERVICE_1002_PORT_8081_TCP_PORT", true},
		{"YILI_TEST_SERVICE_1002_PORT_8081_TCP_PROTO", "YILI_TEST_SERVICE_1002_PORT_8081_TCP_PROTO", true},

		// 不应该匹配的变量
		{"PATH", "PATH", false},
		{"HOME", "HOME", false},
		{"USER", "USER", false},
		{"DATABASE_URL", "DATABASE_URL", false},
		{"APP_CONFIG", "APP_CONFIG", false},
		{"SERVICE_NAME", "SERVICE_NAME", false},               // 不以 _SERVICE_HOST 等结尾
		{"MY_KUBERNETES_VAR", "MY_KUBERNETES_VAR", false},     // 不以 KUBERNETES_ 开头
		{"SERVICE_HOST_BACKUP", "SERVICE_HOST_BACKUP", false}, // 不以 _SERVICE_HOST 结尾
		{"SERVICE_123_VAR", "SERVICE_123_VAR", false},         // 不是 SERVICE_数字_PORT 格式
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := envRegex.MatchString(tt.envKey)
			if result != tt.expected {
				t.Errorf("envRegex.MatchString(%q) = %v, expected %v", tt.envKey, result, tt.expected)
			}
		})
	}
}
