# Copyright 2025 iLogtail Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: CI

on:
  pull_request:
    paths-ignore:
      - "docs/**"
      - "example_config/**"
      - "docker/**"
      - "k8s_template/**"
      - "changes/**"
      - "licenses/**"
      - "CHANGELOG.md"
  push:
    branches:
      - main
      - 1.*

jobs:
  # 检查 License
  CheckLicense:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Set up Go 1.19
        uses: actions/setup-go@v4
        with:
          go-version: 1.19

      - name: Check out code
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Check License Header
        run: make check-license

      - name: Check Dependencies Licences
        run: make check-dependency-licenses

  # 检查代码规范
  Lint:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Set up Go 1.19
        uses: actions/setup-go@v4
        with:
          go-version: 1.19

      - name: Check out code
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: C++ Core Lint
        uses: jidicula/clang-format-action@v4.14.0
        with:
          clang-format-version: '18'
          check-path: 'core'
          exclude-regex: 'common/xxhash|labels/Relabel\.cpp|ProcessorParseContainerLogNative\.cpp|FlusherSLS\.cpp|_thirdparty|core/common/LRUCache\.h|core/common/queue/.*|core/common/magic_enum\.hpp'
          include-regex: '.*\.(cpp|h)$'
      
      - name: Go Plugin Lint
        run: make lint

  # Build 检查能否编译通过并成功打包，同时检查glibc
  Build:
    runs-on: arc-runner-set-ilogtail
    timeout-minutes: 60
    permissions:
      packages: write
    steps:
      - name: prepare ubuntu environment
        run: |
          sudo bash -c 'cat > /etc/apt/sources.list << EOL
          deb https://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse
          deb-src https://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse

          deb https://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse
          deb-src https://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse

          deb https://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse
          deb-src https://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse

          # deb https://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse
          # deb-src https://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse

          deb https://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse
          deb-src https://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse
          EOL'
          sudo apt update
          sudo apt-get clean && sudo apt-get update && sudo apt-get install -y libsystemd-dev build-essential git curl bc

      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: Check disk space
        run: |
          df -hT $PWD

      - name: Set up Go 1.19
        uses: actions/setup-go@v4
        with:
          go-version: 1.19

      - name: Check out code
        uses: actions/checkout@v4
        with:
          submodules: false
      
      - name: Set custom submodule URL and fetch
        run: |
          SUBMODULE_PATH="core/_thirdparty/coolbpf"
          git config submodule.$SUBMODULE_PATH.url "https://github.com/iLogtail/coolbpf-mirror.git"
          git submodule update --init
          cd $SUBMODULE_PATH
          echo "Current commit: $(git rev-parse HEAD)"

      - name: Build Binary
        env:
          BUILD_LOGTAIL_UT: OFF
          ENABLE_COMPATIBLE_MODE: ON
          ENABLE_STATIC_LINK_CRT: ON
          WITHOUTGDB: ON
          MAKE_JOBS: 24
          WITHSPL: ON
        run: make dist

      - name: Check compatibility
        run: scripts/check_glibc.sh

      - name: Build Docker
        run: make docker

      - name: Export Image to Tar
        run: docker save -o image.tar aliyun/loongcollector:0.0.1

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: loongcollector-image
          path: image.tar

  # 编译并运行C++ UT，同时测试代码覆盖率
  UnitTestCpp:
    runs-on: arc-runner-set-ilogtail
    timeout-minutes: 60
    steps:
      - name: prepare ubuntu environment
        run: |
          sudo bash -c 'cat > /etc/apt/sources.list << EOL
          deb https://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse
          deb-src https://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse

          deb https://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse
          deb-src https://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse

          deb https://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse
          deb-src https://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse

          # deb https://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse
          # deb-src https://mirrors.aliyun.com/ubuntu/ jammy-proposed main restricted universe multiverse

          deb https://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse
          deb-src https://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse
          EOL'
          sudo apt update     
          sudo apt-get clean && sudo apt-get update && sudo apt-get install -y libsystemd-dev build-essential git curl bc

      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: Check disk space
        run: |
          df -hT $PWD

      - name: Set up Go 1.19
        uses: actions/setup-go@v4
        with:
          go-version: 1.19

      - name: Check out code
        uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 2
      
      - name: Set custom submodule URL and fetch
        run: |
          SUBMODULE_PATH="core/_thirdparty/coolbpf"
          git config submodule.$SUBMODULE_PATH.url "https://github.com/iLogtail/coolbpf-mirror.git"
          git submodule update --init
          cd $SUBMODULE_PATH
          echo "Current commit: $(git rev-parse HEAD)"

      - name: Build Unit Test
        env:
          BUILD_LOGTAIL: OFF
          BUILD_LOGTAIL_UT: ON
          ENABLE_COMPATIBLE_MODE: OFF
          ENABLE_STATIC_LINK_CRT: ON
          WITHOUTGDB: ON
          MAKE_JOBS: 24
          WITHSPL: ON
          BUILD_TYPE: Debug
        run: CURRENT_DIR=$(pwd) && sed -i "s|/src|$CURRENT_DIR|g" docker/Dockerfile_build && make core PATH_IN_DOCKER=$(pwd)

      - name: Build Coverage Image
        run: docker build -t unittest_coverage -f ./docker/Dockerfile_coverage .

      - name: Unit Test
        run: docker run --privileged -v /sys:/sys -v /:/logtail_host -v $(pwd):$(pwd) unittest_coverage bash -c "cd $(pwd) && make unittest_core"

      - name: Unit Test Coverage
        run: docker run -v $(pwd):$(pwd) unittest_coverage bash -c "cd $(pwd)/core && gcovr --gcov-ignore-parse-errors --merge-mode-functions=separate --gcov-ignore-errors=no_working_dir_found --root . --json coverage.json --json-summary-pretty --json-summary summary.json -e \".*\.pb\.cc\" -e \".*\.pb\.h\" -e \".*unittest.*\" -e \".*sdk.*\" -e \".*logger.*\" -e \".*config_server.*\" -e \".*go_pipeline.*\" -e \".*application.*\" -e \".*runner.*\" -e \".*_thirdparty.*\""

      - name: Setup Python3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Report code coverage
        run: python3 tools/coverage-diff/main.py --path core/coverage.json --summary core/summary.json

  # 运行Go UT
  UnitTestGo:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: prepare ubuntu environment
        run: |
          sudo apt update
          sudo apt-get clean && sudo apt-get update && sudo apt-get install -y libsystemd-dev

      - name: Set up Go 1.19
        uses: actions/setup-go@v4
        with:
          go-version: 1.19

      - name: Check out code
        uses: actions/checkout@v4
        with:
          submodules: false
      
      - name: Copy Lib
        run: sudo cp ./pkg/logtail/libGoPluginAdapter.so /usr/lib/

      - name: UnitTest Plugin
        run: sudo make unittest_plugin

      - name: UnitTest PluginManager
        run: sudo make unittest_pluginmanager 
  
  # 生成E2E测试用例列表
  GenerateE2ETestCases:
    runs-on: ubuntu-latest
    outputs:
      cases: ${{ steps.set-cases.outputs.cases }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Discover Test Cases
        id: discover
        run: |
          # 使用JSON格式输出用例列表
          cases=($(find test/e2e/test_cases -mindepth 1 -maxdepth 1 -type d -printf "%f\n"))
          echo "Found cases: ${cases[*]}"
          # 转换为JSON数组格式
          printf '["%s"]' "$(IFS=$','; echo "${cases[*]}")" > cases.json
          cat cases.json
          echo "cases=$(cat cases.json)" >> $GITHUB_OUTPUT

  # E2E测试
  E2E:
    runs-on: ubuntu-latest
    needs: 
      - Build
      - GenerateE2ETestCases
    strategy:
      matrix:
        test_case: ${{ fromJson(needs.GenerateE2ETestCases.outputs.cases) }}
    timeout-minutes: 60
    steps:
      - name: Set up Go 1.19
        uses: actions/setup-go@v4
        with:
          go-version: 1.19

      - name: Check out code
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Set custom submodule URL and fetch
        run: |
          SUBMODULE_PATH="core/_thirdparty/coolbpf"
          git config submodule.$SUBMODULE_PATH.url "https://github.com/iLogtail/coolbpf-mirror.git"
          git submodule update --init
          cd $SUBMODULE_PATH
          echo "Current commit: $(git rev-parse HEAD)"

      - name: Update Docker-compose to v2
        run: |
          sudo curl -SL https://github.com/docker/compose/releases/download/v2.7.0/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: loongcollector-image

      - name: Import Image from Tar
        run: docker load -i ./image.tar

      - name: E2E Behavior Test Case ${{ matrix.test_case }}
        env:
          TEST_CASE: ${{ matrix.test_case }}
        run: |
          make gocdocker
          ./scripts/e2e.sh e2e

  ActionsTimeline:
    needs:
      - CheckLicense
      - Lint
      - Build
      - UnitTestCpp
      - UnitTestGo
      - E2E
    runs-on: ubuntu-latest
    permissions:
      actions: read
    steps:
      - uses: Kesin11/actions-timeline@v2